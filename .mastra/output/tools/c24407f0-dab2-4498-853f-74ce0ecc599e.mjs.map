{"version":3,"file":"c24407f0-dab2-4498-853f-74ce0ecc599e.mjs","sources":["../../../src/mastra/tools/analyze-user-growth.ts"],"sourcesContent":["import { createTool } from \"@mastra/core\";\nimport { z } from \"zod\";\nimport pg from \"pg\";\nimport mysql from \"mysql2/promise\";\n\n// Database connection helper\nasync function createDbConnection(dbType: \"postgres\" | \"mysql\", connectionString: string) {\n  if (dbType === \"postgres\") {\n    const client = new pg.Client(connectionString);\n    await client.connect();\n    return client;\n  } else {\n    const connection = await mysql.createConnection(connectionString);\n    return connection;\n  }\n}\n\nexport const analyzeUserGrowth = createTool({\n  id: \"analyzeUserGrowth\",\n  description: \"Analyze user growth metrics from a database\",\n  inputSchema: z.object({\n    dbType: z.enum([\"postgres\", \"mysql\"]).describe(\"Database type: postgres or mysql\"),\n    connectionString: z.string().describe(\"Database connection string\"),\n    tableName: z.string().optional().describe(\"Table name to query (optional - will auto-discover if not provided)\"),\n    daysToAnalyze: z.number().default(7).describe(\"Number of days to analyze for growth\")\n  }),\n  outputSchema: z.object({\n    newUsers: z.number().describe(\"Number of new users in the analyzed period\"),\n    previousPeriodUsers: z.number().describe(\"Number of users in the previous period\"),\n    growthRate: z.number().describe(\"Growth rate percentage\"),\n    growthMultiplier: z.number().describe(\"Growth multiplier (e.g., 1.5 for 50% growth)\"),\n    surge: z.boolean().describe(\"Whether a surge (>50% growth) was detected\"),\n    startDate: z.string().describe(\"Start date of the analysis period\"),\n    endDate: z.string().describe(\"End date of the analysis period\"),\n    dailyBreakdown: z.array(z.object({\n      date: z.string(),\n      count: z.number()\n    })).optional().describe(\"Daily breakdown of user signups\"),\n    dataSource: z.object({\n      dbType: z.enum([\"postgres\", \"mysql\"]),\n      tableName: z.string(),\n      dateColumn: z.string()\n    }).describe(\"Information about the data source\")\n  }),\n  execute: async ({context : { dbType, connectionString, tableName, daysToAnalyze = 7 }}) => {\n    const db = await createDbConnection(dbType, connectionString);\n    \n    try {\n      // Discover table if not provided\n      let userTable = tableName;\n      if (!userTable) {\n        let tables: string[] = [];\n        \n        if (dbType === \"postgres\") {\n          const result = await (db as pg.Client).query(`\n            SELECT table_name \n            FROM information_schema.tables \n            WHERE table_schema = 'public' \n            AND table_type = 'BASE TABLE'\n          `);\n          tables = result.rows.map(row => row.table_name);\n        } else {\n          const [rows] = await (db as mysql.Connection).query(`\n            SELECT table_name \n            FROM information_schema.tables \n            WHERE table_schema = DATABASE()\n          `) as any;\n          tables = rows.map((row: any) => row.TABLE_NAME || row.table_name);\n        }\n        \n        const userTableCandidates = tables.filter(table => \n          table.toLowerCase().includes('user') || \n          table.toLowerCase().includes('account') ||\n          table.toLowerCase().includes('member') ||\n          table.toLowerCase().includes('customer')\n        );\n        \n        userTable = userTableCandidates[0];\n        if (!userTable) {\n          throw new Error(\"Could not identify users table. Please provide the table name explicitly.\");\n        }\n      }\n      \n      // Identify date column\n      let dateColumn = \"created_at\";\n      \n      if (dbType === \"postgres\") {\n        const columnsResult = await (db as pg.Client).query(`\n          SELECT column_name \n          FROM information_schema.columns \n          WHERE table_name = $1\n        `, [userTable]);\n        \n        const columns = columnsResult.rows.map(row => row.column_name);\n        const dateColumns = columns.filter(col => \n          col.includes('created') || \n          col.includes('signup') || \n          col.includes('registered') ||\n          col.includes('joined')\n        );\n        if (dateColumns.length > 0) {\n          dateColumn = dateColumns[0];\n        }\n        \n        // Query for user growth\n        const query = `\n          WITH daily_signups AS (\n            SELECT \n              DATE(${dateColumn}) as signup_date,\n              COUNT(*) as daily_count\n            FROM ${userTable}\n            WHERE ${dateColumn} >= CURRENT_DATE - INTERVAL '${daysToAnalyze} days'\n            GROUP BY DATE(${dateColumn})\n            ORDER BY signup_date\n          ),\n          previous_period AS (\n            SELECT COUNT(*) as count\n            FROM ${userTable}\n            WHERE ${dateColumn} >= CURRENT_DATE - INTERVAL '${daysToAnalyze * 2} days'\n            AND ${dateColumn} < CURRENT_DATE - INTERVAL '${daysToAnalyze} days'\n          ),\n          current_period AS (\n            SELECT COUNT(*) as count\n            FROM ${userTable}\n            WHERE ${dateColumn} >= CURRENT_DATE - INTERVAL '${daysToAnalyze} days'\n          )\n          SELECT \n            (SELECT count FROM current_period) as recent_signups,\n            (SELECT count FROM previous_period) as previous_signups,\n            (SELECT json_agg(json_build_object('date', signup_date, 'count', daily_count) ORDER BY signup_date) FROM daily_signups) as daily_breakdown,\n            CURRENT_DATE - INTERVAL '${daysToAnalyze} days' as start_date,\n            CURRENT_DATE as end_date\n        `;\n        \n        const result = await (db as pg.Client).query(query);\n        const data = result.rows[0];\n        \n        const newUsers = parseInt(data.recent_signups) || 0;\n        const previousPeriodUsers = parseInt(data.previous_signups) || 0;\n        const growthRate = previousPeriodUsers > 0 \n          ? ((newUsers - previousPeriodUsers) / previousPeriodUsers * 100)\n          : 0;\n        const growthMultiplier = previousPeriodUsers > 0 \n          ? newUsers / previousPeriodUsers \n          : 0;\n        \n        return {\n          newUsers,\n          previousPeriodUsers,\n          growthRate,\n          growthMultiplier,\n          surge: growthMultiplier > 1.5,\n          startDate: data.start_date.toISOString(),\n          endDate: data.end_date.toISOString(),\n          dailyBreakdown: data.daily_breakdown || [],\n          dataSource: {\n            dbType,\n            tableName: userTable,\n            dateColumn\n          }\n        };\n      } else {\n        // MySQL implementation\n        const [columns] = await (db as mysql.Connection).query(`\n          SELECT COLUMN_NAME \n          FROM INFORMATION_SCHEMA.COLUMNS \n          WHERE TABLE_NAME = ? AND TABLE_SCHEMA = DATABASE()\n        `, [userTable]) as any;\n        \n        const columnNames = columns.map((col: any) => col.COLUMN_NAME);\n        const dateColumns = columnNames.filter((col: string) => \n          col.includes('created') || \n          col.includes('signup') || \n          col.includes('registered') ||\n          col.includes('joined')\n        );\n        if (dateColumns.length > 0) {\n          dateColumn = dateColumns[0];\n        }\n        \n        // Query for user growth\n        const [[metrics]] = await (db as mysql.Connection).query(`\n          SELECT \n            (SELECT COUNT(*) FROM ${userTable} WHERE ${dateColumn} >= DATE_SUB(CURDATE(), INTERVAL ${daysToAnalyze} DAY)) as recent_signups,\n            (SELECT COUNT(*) FROM ${userTable} WHERE ${dateColumn} >= DATE_SUB(CURDATE(), INTERVAL ${daysToAnalyze * 2} DAY) AND ${dateColumn} < DATE_SUB(CURDATE(), INTERVAL ${daysToAnalyze} DAY)) as previous_signups,\n            DATE_SUB(CURDATE(), INTERVAL ${daysToAnalyze} DAY) as start_date,\n            CURDATE() as end_date\n        `) as any;\n        \n        // Get daily breakdown\n        const [dailyData] = await (db as mysql.Connection).query(`\n          SELECT \n            DATE(${dateColumn}) as signup_date,\n            COUNT(*) as daily_count\n          FROM ${userTable}\n          WHERE ${dateColumn} >= DATE_SUB(CURDATE(), INTERVAL ${daysToAnalyze} DAY)\n          GROUP BY DATE(${dateColumn})\n          ORDER BY signup_date\n        `) as any;\n        \n        const newUsers = metrics.recent_signups || 0;\n        const previousPeriodUsers = metrics.previous_signups || 0;\n        const growthRate = previousPeriodUsers > 0 \n          ? ((newUsers - previousPeriodUsers) / previousPeriodUsers * 100)\n          : 0;\n        const growthMultiplier = previousPeriodUsers > 0 \n          ? newUsers / previousPeriodUsers \n          : 0;\n        \n        return {\n          newUsers,\n          previousPeriodUsers,\n          growthRate,\n          growthMultiplier,\n          surge: growthMultiplier > 1.5,\n          startDate: new Date(metrics.start_date).toISOString(),\n          endDate: new Date(metrics.end_date).toISOString(),\n          dailyBreakdown: dailyData.map((row: any) => ({\n            date: new Date(row.signup_date).toISOString(),\n            count: row.daily_count\n          })),\n          dataSource: {\n            dbType,\n            tableName: userTable,\n            dateColumn\n          }\n        };\n      }\n    } finally {\n      if (dbType === \"postgres\") {\n        await (db as pg.Client).end();\n      } else {\n        await (db as mysql.Connection).end();\n      }\n    }\n  }\n});"],"names":[],"mappings":"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"}